@page "/samples"
@using MudProject.Data
@using DataAccess
@using MudProject.Models
@inject IMySQLDataAccess _data
@inject IConfiguration _config


<PageTitle>Counter</PageTitle>

<h1>Counter</h1>


<form>


        <h3>Add New Sample</h3>
        <EditForm Model="@newSample" OnValidSubmit="@InsertSample">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-row">
                <div class="col-md-12 mb-3">
                    <label for="validationDefault01">First name</label>
                    <input type="text" class="form-control" id="validationDefault01" placeholder="First name" required @bind-value="addSample.FirstName">
                </div>


                <div class="mb-3">
                    <label for="validationDefault05">Zip</label>
                    <input type="text" class="form-control" id="validationDefault05" placeholder="Zip" required @bind-value="addSample.Zip">
                </div>


                <div class="form-group col-md-6 mb-sm-5">
                    <label for="exampleFormControlTextarea1">Example textarea</label>
                    <textarea type="text" class="form-control" id="exampleFormControlTextarea1" rows="3" @onchange="@((args) => addSample.Txt = args.Value.ToString())"></textarea>
                </div>


                <button class="btn btn-primary" type="submit">Submit form</button>
            </div>

        </EditForm>

</form>




@code {

    List<SamplesModel>? samples;
    List<SamplesModel>? thisSample;

    private SamplesModel newSample = new SamplesModel();


    // booleans to determine what to display in the UI
    bool createStatus = true;
    bool editStatus = false;
    bool deleteErrorMessage = false;

    // error message for db delete exception
    string dbErrorMessage = "";

    // variable to keep track of the current appt being edited
    int apptBeingEdited;


    public class AddSample
    {
        public string? FirstName { get; set; }
        public string? Zip { get; set; }
        public string? Txt { get; set; }
    }

    private AddSample addSample = new AddSample();

    // Load the initial data
    protected override async Task OnInitializedAsync()
    {
        string sql = "SELECT * FROM samples";
        samples = await _data.LoadData<SamplesModel, dynamic>(sql, new { }, _config.GetConnectionString("MySQLConnection"));
    }

    // Insert Appointments
    private async Task InsertSample()
    {
        SamplesModel a = new SamplesModel
        {

            FirstName = new string(addSample.FirstName),
            Zip = new string(addSample.Zip),
            Txt = new string(addSample.Txt)

        };

        string sql = "INSERT INTO samples (FirstName, Zip, Txt) VALUES (@FirstName, @Zip, @Txt);";
        await _data.SaveData(sql, a, _config.GetConnectionString("MySqlConnection"));
        await OnInitializedAsync();
        a = new SamplesModel();
        addSample = new AddSample();
    }
}