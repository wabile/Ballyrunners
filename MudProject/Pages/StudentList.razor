@page "/studentList"
@*This page list the PPS Number, Name and Surname of the students registred
  and allow the user navegate to the page StudentEditing by clicking on the student name*@

@using Dapper
@using MudProject.Data
@using DataAccess
@using MudProject.Models
@using System.Data
@using MySql.Data.MySqlClient
@inject IMySQLDataAccess _data
@inject IConfiguration _config
@inject NavigationManager UriHelper
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Student</PageTitle>
<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12" sm="12"><MudText Align="Align.Left" Typo="Typo.h6">Students</MudText></MudItem>
        <MudItem xs="12" sm="3"><MudTextField T="string" @bind-value="@searchTerm" Placeholder="Search" Class="mt-0"></MudTextField></MudItem>
        <MudItem xs="12" sm="1"><MudIconButton Icon="@Icons.Filled.Search" Color="Color.Info" @onclick="@SearchStudent"></MudIconButton></MudItem>
        <MudItem xs="12" sm="1"><MudIconButton Icon="@Icons.Filled.Clear" Color="Color.Secondary" @onclick="@Cancel"></MudIconButton></MudItem>
        <MudItem xs="12" sm="3"><MudButton @onclick=@Navigate Color="Color.Primary">New Student</MudButton></MudItem>
        <MudItem xs="12" sm="4"><MudText></MudText></MudItem>
    </MudGrid>

    @if (listStudent == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" sm="8">
        <HeaderContent>
            <MudTh style="width: 140px; font-weight: bold; font-size:medium; " Align="left">PPS Number</MudTh>
            <MudTh style="width: 150px; font-weight: bold; font-size:medium;" Align="left">Name</MudTh>
            <MudTh style="width: 150px; font-weight: bold; font-size:medium;" Align="left">Surname</MudTh>
            <MudTh style="width: 150px; font-weight: bold; font-size:medium;" Align="left">Is Student?</MudTh>
            <MudTh style="width: 20px; font-weight: bold; font-size:medium;"></MudTh>
            <MudTh style="width: 20px; font-weight: bold; font-size:medium;"></MudTh>
        </HeaderContent>

        @foreach (var a in listStudent.ToList())
        {
            if (@a.FirstName != null)
            {
                <RowTemplate>
                    <MudTd DataLabel="PPS Number" style="width: 140px;" Align="left"><MudText>@a.PPSN</MudText></MudTd>
                    <MudTd DataLabel="Name" style="width: 150px;" Align="left"><MudText>@a.FirstName</MudText></MudTd>
                    <MudTd DataLabel="Surname" style="width: 150px; " Align="left"><MudText>@a.Surname</MudText></MudTd>
                    <MudTd DataLabel="Is Student" style="width: 150px; " Align="left"><MudText>@a.isStudent</MudText></MudTd>

                    <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Visibility" Size="Size.Small" href="@($"/studentEditing/{@a.DetailsId}")"></MudIconButton>

                            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="OnButtonClicked">Delete</MudIconButton>
                            <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
                                <MessageContent>
                                    Deleting can <b><i>not</i></b> be undone!
                                </MessageContent>
                                <YesButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever" @onclick="() => Delete(a.DetailsId)">Delete!</MudButton>
                                </YesButton>
                            </MudMessageBox>
                </RowTemplate> 
            }
        }
        </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {

    void Navigate()
    {
        UriHelper.NavigateTo("studentRegistration");
    }

    bool fixed_header = true;
    bool fixed_footer = false;
    bool studentIs = false;

    List<StudentListModel> listStudent = new List<StudentListModel>();
    private string searchTerm;
    protected override async Task OnInitializedAsync()

    {
        string sql = @"SELECT StudentId,s.DetailsId, IsStudent, PPSN,FirstName,Surname FROM students s INNER join personal_details on s.DetailsId = personal_details.DetailsId;";

        listStudent = await _data.LoadData<StudentListModel, dynamic>(sql, null, _config.GetConnectionString("MySQLConnection"));
    }


    async Task SearchStudent()
    {
        listStudent = listStudent.Where(x =>
            String.Concat(x.FirstName, ' ', x.Surname)
                .IndexOf(searchTerm, StringComparison.OrdinalIgnoreCase) >= 0 ||
            (x.PPSN != null && x.PPSN.Contains(searchTerm))
        ).ToList();
    } 

    async Task Cancel()
    {
        searchTerm = "";
        await OnInitializedAsync();
    }

    MudMessageBox mbox { get; set; }

    private async void OnButtonClicked()
    {
        bool? result = await mbox.Show();
        StateHasChanged();
    }

    async Task Delete(int detailID)
    {
        string sql = "delete from personal_details where DetailsId =" + detailID;
        await _data.SaveData(sql, new { }, _config.GetConnectionString("MySqlConnection"));
        await OnInitializedAsync();
        Snackbar.Add("Student data deleted.", Severity.Success);
    }
}
